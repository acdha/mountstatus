FROM rust AS builder

WORKDIR /mountstatus

# We'll update the dependencies first so the build / compile stage for all
# of our dependencies can be cached:
# Until https://github.com/rust-lang/cargo/issues/1891 lands we'll use a fake main app
# to avoid clearing our cache except when dependencies actually change.
COPY Cargo.toml Cargo.lock /mountstatus/
RUN mkdir /mountstatus/src && echo "fn main() {}" > /mountstatus/src/main.rs && cargo build

# Now we'll build the actual project:
COPY src/ /mountstatus/src/
RUN cargo build --release

FROM debian:stretch AS deb_builder

RUN apt-get -qy update && apt-get -qy install ruby ruby-dev rubygems build-essential && apt-get clean
RUN gem install --no-ri --no-rdoc fpm && gem clean

WORKDIR /package-build

COPY --from=builder /mountstatus/target/release/mount_status_monitor /package-build/
COPY systemd/mount_status_monitor.service /package-build/

# This is good for a ~60% size reduction:
RUN strip mount_status_monitor

RUN fpm -s dir -t deb -n mount-status-monitor mount_status_monitor=/usr/sbin/mount_status_monitor mount_status_monitor.service=/etc/systemd/system/mount_status_monitor.service

FROM centos:7 AS rpm_el7_builder

RUN yum install -q -y ruby-devel gcc make rpm-build libffi-devel
RUN gem install --no-ri --no-rdoc fpm && gem clean

WORKDIR /package-build

COPY --from=builder /mountstatus/target/release/mount_status_monitor /package-build/
COPY systemd/mount_status_monitor.service /package-build/

# This is good for a ~60% size reduction:
RUN strip mount_status_monitor

RUN fpm -s dir -t rpm --rpm-dist el7 -n mount-status-monitor mount_status_monitor=/usr/sbin/mount_status_monitor mount_status_monitor.service=/etc/systemd/system/mount_status_monitor.service

FROM debian:stretch AS aggregator

WORKDIR /packages/

COPY --from=deb_builder /package-build/*.deb /packages/
COPY --from=rpm_el7_builder /package-build/*.rpm /packages/

CMD ["/bin/cp", "-vr", ".", "/host-packages-volume"]
